From d5cb8b4552ca6c7f19618a00192f44e30b3c4364 Mon Sep 17 00:00:00 2001
From: Mohit Singh <mohit.p@variscite.com>
Date: Wed, 24 Jun 2020 14:47:10 -0700
Subject: [PATCH] ov5640: Auto focus support.

---
 libcamera3/Camera.cpp    |  62 ++++++++++++++++++---
 libcamera3/Camera.h      |  10 ++++
 libcamera3/ImxCamera.cpp | 116 ++++++++++++++++++++++++++++++++++++++-
 libcamera3/ImxCamera.h   |   5 ++
 libcamera3/Metadata.cpp  |  19 +++++--
 libcamera3/VideoStream.h |   3 +
 6 files changed, 201 insertions(+), 14 deletions(-)

diff --git a/libcamera3/Camera.cpp b/libcamera3/Camera.cpp
index 2e20871..e88e002 100644
--- a/libcamera3/Camera.cpp
+++ b/libcamera3/Camera.cpp
@@ -40,6 +40,11 @@
 
 #define CAMERA_SYNC_TIMEOUT 5000 // in msecs
 
+// Undefine u8 since the camera_metadata_ro_entry_t contains a u8 field
+#ifdef u8
+    #undef u8
+#endif
+
 extern "C" {
 // Shim passed to the framework to close an opened device.
 static int32_t close_device(hw_device_t* dev)
@@ -573,19 +578,62 @@ int32_t Camera::processSettings(sp<Metadata> settings, uint32_t frame)
     settings->addUInt8(ANDROID_CONTROL_AE_STATE, 1, &m3aState.aeState);
 
     // auto focus control.
-    m3aState.afState = ANDROID_CONTROL_AF_STATE_INACTIVE;
+    entry = settings->find(ANDROID_CONTROL_AF_MODE);
+    if (entry.count == 0) {
+        ALOGE("%s: No AF mode entry!", __FUNCTION__);
+        return BAD_VALUE;
+    }
+    uint8_t afMode = (entry.count > 0) ?
+        entry.data.u8[0] : (uint8_t)ANDROID_CONTROL_AF_MODE_OFF;
+
+    entry = settings->find(ANDROID_CONTROL_AF_TRIGGER);
+    if (entry.count > 0) {
+        // save trigger value
+        uint8_t trigger = entry.data.u8[0];
+
+        // check if a ROI has been provided
+        entry = settings->find(ANDROID_CONTROL_AF_REGIONS);
+        if (entry.count > 0) {
+            int xavg = (entry.data.i32[0] + entry.data.i32[2]) / 2;
+            int yavg = (entry.data.i32[1] + entry.data.i32[3]) / 2;
+            ALOGV("%s: AF region: x %d y %d", __FUNCTION__, xavg, yavg);
+            setAutoFocusRegion(xavg, yavg);
+        }
+
+        // get and save trigger ID
+        entry = settings->find(ANDROID_CONTROL_AF_TRIGGER_ID);
+        if (entry.count > 0)
+            m3aState.afTriggerId = entry.data.i32[0];
+
+        // process trigger type
+        ALOGV("trigger: %d afMode %d afTriggerId %d", trigger, afMode, m3aState.afTriggerId);
+        switch (trigger) {
+            case ANDROID_CONTROL_AF_TRIGGER_CANCEL:
+                // in case of continuous focus, cancel means to stop manual focus only
+                if ((afMode == ANDROID_CONTROL_AF_MODE_CONTINUOUS_VIDEO) ||
+                    (afMode == ANDROID_CONTROL_AF_MODE_CONTINUOUS_PICTURE))
+                    m3aState.afState = doAutoFocus(afMode);
+                break;
+            case ANDROID_CONTROL_AF_TRIGGER_START:
+                m3aState.afState = doAutoFocus(afMode);
+                break;
+            case ANDROID_CONTROL_AF_TRIGGER_IDLE:
+                m3aState.afState = ANDROID_CONTROL_AF_STATE_INACTIVE;
+                break;
+            default:
+                ALOGE("unknown trigger: %d", trigger);
+                m3aState.afState = ANDROID_CONTROL_AF_STATE_INACTIVE;
+        }
+    } else {
+        m3aState.afState = getAutoFocusStatus(afMode);
+    }
+    settings->addInt32(ANDROID_CONTROL_AF_TRIGGER_ID, 1, &m3aState.afTriggerId);
     settings->addUInt8(ANDROID_CONTROL_AF_STATE, 1, &m3aState.afState);
 
     // auto white balance control.
     m3aState.awbState = ANDROID_CONTROL_AWB_STATE_INACTIVE;
     settings->addUInt8(ANDROID_CONTROL_AWB_STATE, 1, &m3aState.awbState);
 
-    entry = settings->find(ANDROID_CONTROL_AF_TRIGGER_ID);
-    if (entry.count > 0) {
-        m3aState.afTriggerId = entry.data.i32[0];
-    }
-
-    settings->addInt32(ANDROID_CONTROL_AF_TRIGGER_ID, 1, &m3aState.afTriggerId);
     settings->addInt32(ANDROID_CONTROL_AE_PRECAPTURE_ID, 1, &m3aState.aeTriggerId);
 
     notifyShutter(frame, timestamp);
diff --git a/libcamera3/Camera.h b/libcamera3/Camera.h
index 7715ef1..a4b065d 100644
--- a/libcamera3/Camera.h
+++ b/libcamera3/Camera.h
@@ -84,6 +84,16 @@ protected:
     // Initialize static camera characteristics for individual device
     virtual status_t initSensorStaticData() = 0;
 
+    virtual uint8_t doAutoFocus(uint8_t mode) {
+        return ANDROID_CONTROL_AF_STATE_INACTIVE;
+    }
+    virtual uint8_t getAutoFocusStatus(uint8_t mode) {
+        return ANDROID_CONTROL_AF_STATE_INACTIVE;
+    }
+    virtual void setAutoFocusRegion(int x, int y) {
+        return;
+    }
+
     virtual void setPreviewPixelFormat();
     virtual void setPicturePixelFormat();
 
diff --git a/libcamera3/ImxCamera.cpp b/libcamera3/ImxCamera.cpp
index ed3986d..e5ff311 100644
--- a/libcamera3/ImxCamera.cpp
+++ b/libcamera3/ImxCamera.cpp
@@ -22,6 +22,11 @@ ImxCamera::ImxCamera(int32_t id, int32_t facing, int32_t orientation, char *path
 {
     mCameraMetadata = cam_metadata;
 
+     ctrl_fd = open(mDevPath, O_RDWR);
+    if (ctrl_fd < 0) {
+        ALOGE("%s invalid fd handle", __func__);
+    }
+
     if (cam_metadata->buffer_type == CameraSensorMetadata::kMmap)
         mVideoStream = new ImxCameraMMAPStream(this, cam_metadata->omit_frame);
     else if (cam_metadata->buffer_type == CameraSensorMetadata::kDma)
@@ -30,6 +35,8 @@ ImxCamera::ImxCamera(int32_t id, int32_t facing, int32_t orientation, char *path
 
 ImxCamera::~ImxCamera()
 {
+   if (ctrl_fd > 0)
+       close(ctrl_fd);
 }
 
 
@@ -56,8 +63,8 @@ int ImxCamera::ImxCameraMMAPStream::getCaptureMode(int width, int height)
 
 status_t ImxCamera::initSensorStaticData()
 {
-    int32_t fd = open(mDevPath, O_RDWR);
-    if (fd < 0) {
+    int32_t fd = ctrl_fd;   
+     if (fd < 0) {
         ALOGE("ImxCameraCameraDevice: initParameters sensor has not been opened");
         return BAD_VALUE;
     }
@@ -175,7 +182,6 @@ status_t ImxCamera::initSensorStaticData()
           mPhysicalWidth,
           mPhysicalHeight);
 
-    close(fd);
     return NO_ERROR;
 }
 
@@ -356,3 +362,107 @@ int ImxCamera::ImxCameraDMAStream::getCaptureMode(int width, int height)
 
     return capturemode;
 }
+
+uint8_t ImxCamera::getAutoFocusStatus(uint8_t mode)
+{
+    struct v4l2_control c;
+    uint8_t ret = ANDROID_CONTROL_AF_STATE_INACTIVE;
+    int result;
+
+    int32_t fd = ctrl_fd;
+    if (fd < 0) {
+        ALOGE("couldn't open device %s", mDevPath);
+        return ret;
+    }
+
+    c.id = V4L2_CID_AUTO_FOCUS_STATUS;
+    result = ioctl(fd, VIDIOC_G_CTRL, &c);
+    if (result != 0) {
+        ALOGE("getAutoFocusStatus: ioctl error: %d", result);
+        goto end;
+    }
+
+    switch (c.value) {
+    case V4L2_AUTO_FOCUS_STATUS_BUSY:
+        if ((mode == ANDROID_CONTROL_AF_MODE_AUTO) ||
+            (mode == ANDROID_CONTROL_AF_MODE_MACRO))
+            ret = ANDROID_CONTROL_AF_STATE_ACTIVE_SCAN;
+        else
+            ret = ANDROID_CONTROL_AF_STATE_PASSIVE_SCAN;
+        break;
+    case V4L2_AUTO_FOCUS_STATUS_REACHED:
+        ret = ANDROID_CONTROL_AF_STATE_FOCUSED_LOCKED;
+        break;
+    case V4L2_AUTO_FOCUS_STATUS_FAILED:
+    case V4L2_AUTO_FOCUS_STATUS_IDLE:
+    default:
+        ret = ANDROID_CONTROL_AF_STATE_INACTIVE;
+    }
+end:
+    return ret;
+}
+
+#define OV5640_AF_ZONE_ARRAY_WIDTH	80
+void ImxCamera::setAutoFocusRegion(int x, int y)
+{
+    struct v4l2_control c;
+    int result;
+    /* Android provides coordinates scaled to max picture resolution */
+    float ratio = (float)mVideoStream->getWidth() / mVideoStream->getHeight();
+    int scaled_x = x / (mMaxWidth / OV5640_AF_ZONE_ARRAY_WIDTH);
+    int scaled_y = y / (mMaxHeight / (OV5640_AF_ZONE_ARRAY_WIDTH / ratio));
+
+    int32_t fd = ctrl_fd;
+    if (fd < 0) {
+        ALOGE("couldn't open device %s", mDevPath);
+        return;
+    }
+
+    /* Using custom implementation of the absolute focus ioctl for ov5640 */
+    c.id = V4L2_CID_FOCUS_ABSOLUTE;
+    c.value = ((scaled_x & 0xFFFF) << 16) + (scaled_y & 0xFFFF);
+    result = ioctl(fd, VIDIOC_S_CTRL, &c);
+    if (result != 0)
+        ALOGE("setAutoFocusRegion:ioctl s ctrl error: %d", result);
+
+    return;
+}
+
+uint8_t ImxCamera::doAutoFocus(uint8_t mode)
+{
+    struct v4l2_control c;
+    uint8_t ret = ANDROID_CONTROL_AF_STATE_INACTIVE;
+    int result;
+
+    int32_t fd = ctrl_fd;
+    if (fd < 0) {
+        ALOGE("couldn't open device %s", mDevPath);
+        return ret;
+    }
+
+    switch (mode) {
+    case ANDROID_CONTROL_AF_MODE_AUTO:
+    case ANDROID_CONTROL_AF_MODE_MACRO:
+        ret = ANDROID_CONTROL_AF_STATE_ACTIVE_SCAN;
+        c.id = V4L2_CID_AUTO_FOCUS_START;
+        break;
+    case ANDROID_CONTROL_AF_MODE_CONTINUOUS_VIDEO:
+    case ANDROID_CONTROL_AF_MODE_CONTINUOUS_PICTURE:
+        ret = ANDROID_CONTROL_AF_STATE_PASSIVE_SCAN;
+        c.id = V4L2_CID_FOCUS_AUTO;
+        c.value = 1;
+        break;
+    case ANDROID_CONTROL_AF_MODE_OFF:
+    default:
+        ret = ANDROID_CONTROL_AF_STATE_INACTIVE;
+        c.id = V4L2_CID_AUTO_FOCUS_STOP;
+    }
+    result = ioctl(fd, VIDIOC_S_CTRL, &c);
+    if (result != 0) {
+        ALOGE("doAutoFocus: ioctl error: %d", result);
+        ret = ANDROID_CONTROL_AF_STATE_INACTIVE;
+    }
+
+
+    return ret;
+}
diff --git a/libcamera3/ImxCamera.h b/libcamera3/ImxCamera.h
index ff2a113..7163ac0 100644
--- a/libcamera3/ImxCamera.h
+++ b/libcamera3/ImxCamera.h
@@ -33,6 +33,11 @@ public:
     virtual status_t initSensorStaticData();
     virtual PixelFormat getPreviewPixelFormat();
 
+    virtual uint8_t doAutoFocus(uint8_t mode);
+    virtual uint8_t getAutoFocusStatus(uint8_t mode);
+    virtual void    setAutoFocusRegion(int x, int y);
+    int ctrl_fd;
+
 private:
     class ImxCameraMMAPStream : public MMAPStream
     {
diff --git a/libcamera3/Metadata.cpp b/libcamera3/Metadata.cpp
index 4933799..2771e99 100644
--- a/libcamera3/Metadata.cpp
+++ b/libcamera3/Metadata.cpp
@@ -203,7 +203,7 @@ camera_metadata_t* Metadata::createStaticInfo(SensorData& sensor, camera_info &c
             ARRAY_SIZE(android_control_ae_compensation_step),
             android_control_ae_compensation_step);
 
-    int32_t android_control_max_regions[] = {/*AE*/ 0, /*AWB*/ 0, /*AF*/ 0};
+    int32_t android_control_max_regions[] = {/*AE*/ 0, /*AWB*/ 0, /*AF*/ 1};
     m.addInt32(ANDROID_CONTROL_MAX_REGIONS,
             ARRAY_SIZE(android_control_max_regions),
             android_control_max_regions);
@@ -220,6 +220,11 @@ camera_metadata_t* Metadata::createStaticInfo(SensorData& sensor, camera_info &c
             android_jpeg_max_size);
 
     /* android.lens */
+    float minFocusDistance = 1.0/0.05; /* 5cm */
+    m.addFloat(ANDROID_LENS_INFO_MINIMUM_FOCUS_DISTANCE, 1, &minFocusDistance);
+
+    float hypFocusDistance = 1.0/0.05; /* 5cm */
+    m.addFloat(ANDROID_LENS_INFO_HYPERFOCAL_DISTANCE, 1, &hypFocusDistance);
     float android_lens_info_available_focal_lengths[] = {sensor.mFocalLength};
     m.addFloat(ANDROID_LENS_INFO_AVAILABLE_FOCAL_LENGTHS,
             ARRAY_SIZE(android_lens_info_available_focal_lengths),
@@ -241,6 +246,15 @@ camera_metadata_t* Metadata::createStaticInfo(SensorData& sensor, camera_info &c
             ARRAY_SIZE(android_lens_info_available_optical_stabilization),
             android_lens_info_available_optical_stabilization);
 
+    const uint8_t availableAfModes[] = {
+        ANDROID_CONTROL_AF_MODE_OFF,
+        ANDROID_CONTROL_AF_MODE_AUTO,
+        ANDROID_CONTROL_AF_MODE_CONTINUOUS_PICTURE,
+        ANDROID_CONTROL_AF_MODE_CONTINUOUS_VIDEO,
+    };
+    m.addUInt8(ANDROID_CONTROL_AF_AVAILABLE_MODES, sizeof(availableAfModes),
+               availableAfModes);
+
     /* android.request */
     int32_t android_request_max_num_output_streams[] = {0, 3, 1};
     m.addInt32(ANDROID_REQUEST_MAX_NUM_OUTPUT_STREAMS,
@@ -493,9 +507,6 @@ camera_metadata_t* Metadata::createStaticInfo(SensorData& sensor, camera_info &c
     static const uint8_t availableAeModes[] = {ANDROID_CONTROL_AE_MODE_OFF, ANDROID_CONTROL_AE_MODE_ON};
     m.addUInt8(ANDROID_CONTROL_AE_AVAILABLE_MODES, ARRAY_SIZE(availableAeModes), availableAeModes);
 
-    static const uint8_t availableAfModes[] = {ANDROID_CONTROL_AF_MODE_OFF};
-    m.addUInt8(ANDROID_CONTROL_AF_AVAILABLE_MODES, ARRAY_SIZE(availableAfModes), availableAfModes);
-
     static const uint8_t availableAwbModes[] = {
         ANDROID_CONTROL_AWB_MODE_OFF,
         ANDROID_CONTROL_AWB_MODE_AUTO,
diff --git a/libcamera3/VideoStream.h b/libcamera3/VideoStream.h
index 41337d3..2ad7050 100644
--- a/libcamera3/VideoStream.h
+++ b/libcamera3/VideoStream.h
@@ -57,6 +57,9 @@ public:
     int32_t closeDev();
     int32_t flushDev();
 
+    int32_t getWidth() {return mWidth;}
+    int32_t getHeight() {return mHeight;}
+
     void setOmitFrameCount(uint32_t omitCount) { mOmitFrmCount = omitCount; }
 private:
     // message type.
-- 
2.25.0

